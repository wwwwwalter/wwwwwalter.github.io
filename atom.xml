<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wwwwwalter.github.io</id>
    <title>Albert NoteBook</title>
    <updated>2021-03-16T16:05:30.220Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wwwwwalter.github.io"/>
    <link rel="self" href="https://wwwwwalter.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wwwwwalter.github.io/images/avatar.png</logo>
    <icon>https://wwwwwalter.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Albert NoteBook</rights>
    <entry>
        <title type="html"><![CDATA[Makefile脚本第二篇]]></title>
        <id>https://wwwwwalter.github.io/post/makefile-jiao-ben-di-er-pian/</id>
        <link href="https://wwwwwalter.github.io/post/makefile-jiao-ben-di-er-pian/">
        </link>
        <updated>2021-02-28T17:57:51.000Z</updated>
        <content type="html"><![CDATA[<pre><code># 当想要指定makefile文件名时，在执行的时，需要使用下面的命令
# make -f  my_mkfile
# Makefile中的规则有很多，一条规则一般由几个部分组成:

# 目标：依赖列表
# 		@shell命令列表

all:A C B

A:
	@echo A
B:
	@echo B
C:
	@echo C

# 其中第一个条规则中的“目标”，将会成为终极目标。我们的最终目的，就是为了生成这个目标的。
# 其他的规则之间，没有必然的顺序关系，执行顺序和书写顺序无关，具体先执行哪一个由终极目标中的依赖列表顺序为准。
# 每一个规则中的目标，看似是一个文件，其实只是一个标签
# 每一个规则，不一定有依赖
# 每一个规则，不一定有命令
# 目标：依赖：依赖：依赖，形成一条链路，当哪一层的依赖文件比目标新，从这里网上都要重新编译。
# 通常情况下，目标和依赖都是具体的文件名
# 但是目标和文件名只是标签，具体的依赖和目标只用在shell命令中


# 目标或者依赖，本质上都是标签，优先真实文件列表中找
# 找不到，就去makefile中找，还找不到那说明makefile写的有问题，没有生成着这个依赖标签
# 配合$?测试

# 当时间信息不对时，需要将时间调整 正确之后，才能使用make命令的。
# Makefile是根据文件的时间信息，来调整是否需要重新编译。


# 如果想取消某一条命令本身的打印，那么可以在这个命令的前面加上@符号。
# 如果想忽略错误继续执行下面命令，那么可以在这个命令的前面加上-符号。


# 打印信息
all:
	echo A
	@echo A
	-echo A
	-@echo A



#赋值
B:=$A    #立即展开赋值
C=$A	 #延迟展开赋值
D?=$A	#条件赋值
E+=$A	#追加赋值


	

#特殊变量
all:A B C
	echo $@  #当前规则中的目标 -&gt; all
	echo $^  #当前规则中的所有依赖 -&gt; A B C
	echo $&lt;  #当前依赖中的第一个 -&gt; A
	echo $$  #转义
	echo $*  #模式规则中的所有%匹配的部分，后缀名前面部分
	echo $?  #模式规则中所有比所在规则中的目标新的文件组成的列表


#引号
all:
	echo hello
	echo 'hello'
	echo &quot;hello&quot;

#当前执行的进程的进程编号
all:
	echo '$$$$'   #$$
	echo &quot;$$$$&quot;  #2512

all:
	@echo '$$$$’    #$$ 打印双$
	@echo &quot;$$$$&quot;   #2545 打印当前进程号


#没有依赖的目标可以叫标签
clean:
	rm -fr $@           #rm -fr clean
	rm -fr $(TGT)    #rm -fr a.out


#普通写法
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC = gcc


$(TGT):$(OBJ)
	$(CC) $^ -o $@

test.o:test.c
	$(CC) -c $^ -o $@

cube.o:cube.c
	$(CC) -c $^ -o $@

circle.o:circle.c
	$(CC) -c $^ -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# 模式规则-&gt;可以理解为C语言的函数，有输入类型和输出类型
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC = gcc


$(TGT):$(OBJ)
	@echo &quot;main:$$$$&quot;

%.o:%.c   #模式规则-&gt;可以理解为C语言的函数，有输入类型和输出类型
	@echo &quot;sub:$$$$&quot;	#这句会打印出3个不同的进程号，说明模式函数被调用了3次


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)
# sub:4194
# sub:4195
# sub:4196
# main:4197

# 今天在学习makefile的时候，看到这样一个预定义的变量&quot;$$$$&quot;,
# @echo &quot;$$$$&quot;可以打印当前进程号，平时写C语言的时候会自定义log,
# 于是我自定义一个变量DEBUG=@echo &quot;[$$$$]$@:$^\t&quot;,
# 在每个shell命令前引用这个变量，当执行make的时候,
# 就能把每一组的进程号、目标和依赖打印出来,
# 这在学习makefile模式规则的时候非常有用，分享一下心得。
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC = gcc
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;


$(TGT):$(OBJ)
	$(DEBUG) $(CC) $^ -o $@

%.o:%.c
	$(DEBUG) $(CC)  -c $^ -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# [4488]test.o:test.c      gcc -c test.c -o test.o
# [4489]cube.o:cube.c      gcc -c cube.c -o cube.o
# [4490]circle.o:circle.c  gcc -c circle.c -o circle.o
# [4491]a.out:test.o cube.o circle.o       gcc test.o cube.o circle.o -o a.out


# 4488 4489 4490说明模式规则被调用的次数，取决于上一层中依赖的个数，
# 上一层依赖：OBJ = test.o cube.o circle.o，就是下一层模式规则中的目标，
# 所以模式规则被独立的调用了3次。
# 另外，模式规则我把他理解为一个函数，
# 目标相当于返回值
# 依赖相当于形参
# shell命令相当于函数体
# 每一行一个进程，不管这一行有多少命令
# 总结，之前也学过makefile的语法，感觉规则挺多的，有些模式规则看过自己根本写不出来，如果用C语言的思想来看待makefile,发现一切都在情理之中。
# 模式规则执行时，是一个循环取出的过程，每次取出一个.c,调用下面的命令生成对应的.o
# 直到将所有的.c取完为止。

# 其实这样写，并没有生成任何目标文件，只是把步骤打印出来了
# 如果要正常运行，把$(DEBUG)去掉就行了
# 或者使用下面这种写法，但是打印出来的进程号不是有效命令的进程号
TGT = a.out
SRCS = test.c cube.c circle.c a.c
OBJ = test.o cube.o circle.o a.o
CC = gcc
DEBUG = @echo -n &quot;[$$$$]$@:$^\t&quot;


$(TGT):$(OBJ)
	$(DEBUG)
	$(CC) $^ -o $@

%.o:%.c
	$(DEBUG) 
	$(CC)  -c $^ -o $@
	#$(CC) -c $&lt; -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)
# [2569]test.o:test.c     gcc  -c test.c -o test.o
# [2573]cube.o:cube.c     gcc  -c cube.c -o cube.o
# [2577]circle.o:circle.c gcc  -c circle.c -o circle.o
# [2581]a.o:a.c   gcc  -c a.c -o a.o
# [2585]a.out:test.o cube.o circle.o a.o  gcc test.o cube.o circle.o a.o -o a.out

#隐含规则 make -p
# 如果我们显示写明某些规则，那么make会去隐含规则中查询是否有生成这个规则中的依赖的规则存在
# 如果存在就会调用，不存在就会报错 
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC = gcc
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;


$(TGT):$(OBJ)
	$(DEBUG) $(CC) $^ -o $@

# 在隐含规则中可以找到
# %.o:%.c
# 	$(CC) -c $^ -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# gcc    -c -o test.o test.c
# gcc    -c -o cube.o cube.c
# gcc    -c -o circle.o circle.c
# [3779]a.out:test.o cube.o circle.o      gcc test.o cube.o circle.o -o a.out


# 模式规则
TGT = a.out
SRCS = test.c cube.c circle.c
# OBJ = test.o cube.o circle.o
CC = gcc
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;

$(TGT):$(SRCS:.c=.o)
	$(DEBUG)
	$(CC) $^ -o $@

# %.o:%.c
# 	$(CC) -c $^ -o $@

.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# 打印
# 使用makefile内置函数打印信息，比echo作用域更广
$(warning &quot;hello,world&quot;)
# 可以放在shell cmd里面也可以放在外面
# 放在外面的，在make扫描makefile的时候就执行了
# 放在里面的，在执行shell cmd的的时候才会执行，而且不管在shell cmd的的第几行，都是最先执行的
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
$(warning &quot;1&quot;)
all:
	@echo $(HEAD_DIR)
	$(warning &quot;2&quot;)

$(warning &quot;3&quot;)

.PHONY:clean
clean:
	rm $(OBJ) $(TGT)
$(warning &quot;4&quot;)

# Makefile:10: &quot;1&quot;
# Makefile:16: &quot;3&quot;
# Makefile:21: &quot;4&quot;
# Makefile:14: &quot;2&quot;


#引入头文件
gcc test.c cube.c circle.c -I ./include/

TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
# CROSS_COMPILER=arm-linux-
CC=$(CROSS_COMPILER)gcc
PRO_DIR=$(shell pwd)
INCLUDE_DIR=$(PRO_DIR)/include
# 指定编译选项
CFLAGS=-I$(INCLUDE_DIR)


$(TGT):$(SRCS:.c=.o)
	$(CC) $^ -o $@

%.o:%.c
	$(CC) -c $^ $(CFLAGS) -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# gcc -c test.c -I/home/albert/blog/makefile/test/include -o test.o
# gcc -c cube.c -I/home/albert/blog/makefile/test/include -o cube.o
# gcc -c circle.c -I/home/albert/blog/makefile/test/include -o circle.o
# gcc test.o cube.o circle.o -o a.out


#更智能的 SRCS:.c=.o
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC=gcc
PRO_DIR=$(shell pwd)
INCLUDE_DIR=$(PRO_DIR)/include
CFLAGS=-I$(INCLUDE_DIR)

$(TGT):$(SRCS:.c=.o)
	$(CC) $^ -o $@


.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# gcc -I/home/albert/blog/makefile/test/include   -c -o test.o test.c
# gcc -I/home/albert/blog/makefile/test/include   -c -o cube.o cube.c
# gcc -I/home/albert/blog/makefile/test/include   -c -o circle.o circle.c
# gcc test.o cube.o circle.o -o a.out


#查看依赖关系 gcc -MM
├── circle.c
├── cube.c
├── include
│   ├── circle.h
│   └── cube.h
├── Makefile
└── test.c
gcc -MM -I./include  test.c
test.o: test.c circle.h cube.h


├── circle.c
├── circle.h
├── cube.c
├── cube.h
├── Makefile
└── test.c
gcc -MM test.c
test.o: test.c circle.h cube.h


# 下面的规则用来说明，头文件的更新
# 应该使得所有依赖于它的文件被重新生成
TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC=gcc
PRO_DIR=$(shell pwd)
INCLUDE_DIR=$(PRO_DIR)/include
CFLAGS=-I$(INCLUDE_DIR)

$(TGT):$(SRCS:.c=.o)
	# $(CC) $^ -o $@

# 此处测试用
%.o:%.c
	@$(CC) -MM $(CFLAGS) $^

.PHONY:clean
clean:
	rm $(OBJ) $(TGT)

# test.o: test.c include/circle.h include/cube.h
# cube.o: cube.c include/cube.h
# circle.o: circle.c include/circle.h
# # gcc test.o cube.o circle.o -o a.out


TGT = a.out
SRCS = test.c cube.c circle.c
CC=gcc
PRO_DIR=$(shell pwd)
INCLUDE_DIR=$(PRO_DIR)/include
CFLAGS=-I$(INCLUDE_DIR)


$(TGT):$(SRCS:.c=.o)
	$(CC) $^ -o $@

%.o:%.c
	g++ $&lt; $(CFLAGS) -c

%.d:%.c
	$(CC) -MM $(CFLAGS) $^ &gt; $@
# 下面一行用来告诉make，将上面的模式规则中的命令执行结果包含进当前文件
sinclude $(SRCS:.c=.d)
# include $(SRCS:.c=.d)
# -include $(SRCS:.c=.d)


.PHONY:clean
clean:
	rm $(TGT) $(SRCS:.c=.o) $(SRCS:.c=.d)

# gcc -MM -I/home/albert/blog/makefile/test/include circle.c &gt; circle.d
# gcc -MM -I/home/albert/blog/makefile/test/include cube.c &gt; cube.d
# gcc -MM -I/home/albert/blog/makefile/test/include test.c &gt; test.d
# g++ test.c -I/home/albert/blog/makefile/test/include -c
# g++ cube.c -I/home/albert/blog/makefile/test/include -c
# g++ circle.c -I/home/albert/blog/makefile/test/include -c
# gcc test.o cube.o circle.o -o a.out
#注意执行顺序

#.d文件的作用



# 伪目标.PHONY:clean
# 不是一个真正的目标，仅仅是为了执行其所在规则下面的命令，
# 不应该让make来判断它在makefile同级目录中是否存在，或者是否应该被生成
.PHONY:clean
clean:
	rm $(TGT) $(SRCS:.c=.o) $(SRCS:.c=.d)




# 主Makefile: 作用是制定规则来说明如何在当前目录下生成终极目标a.out
# export全局变量
TGT=a.out

#指定当前所在目录
export TOP_DIR=$(shell pwd)
export HEAD_DIR=$(TOP_DIR)/head
#指定子目录(生成a.out只会依赖于这些目录)
SUB_DIR=tst main
#递归子目标
export SUB_TGT=built-in.o

#指定编译器 编译选项
export CC=g++
export CFLAGS=-I$(HEAD_DIR) -Wall
#指定链接器 链接选项
export LD=ld
export LDFLAGS=

DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;


#主规则
$(TGT):$(SUB_DIR)
	$(CC) $(CFLAGS) $(^:=/$(SUB_TGT))

# 下面的规则，用来告诉make,需要进入到a.out所依赖的那些子目录
# make不需要去判断这个东西是否存在，不应该判断，存不存在也无所谓
# -C 可以让make进入到后面指定的目录


$(SUB_DIR):
	make -C $@


clean:
	rm -vf $(TGT)
	for dir in $(SUB_DIR); do \
		make -C $$dir clean; \
	done


.PHONY:$(SUB_DIR) clean


#sub
# 子makefile
# 用来告诉make如何生成当前目录下的子目标built-in.o

SRCS=tst.cpp
SUB_DIR=foo
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;

# 下面的规则，说明了如何生成当前目录下的子目标
# 是由当前目录下的.c生成的.o 和当前目录下的子目录的子目标临时打包生成的
# -r 临时打包
$(SUB_TGT):$(SRCS:.cpp=.o) $(SUB_DIR)
	$(LD) $(LDFLAGS) $(SRCS:.cpp=.o) $(SUB_DIR:=/$(SUB_TGT)) -r -o $@
	

%.o:%.cpp
	$(CC) $(CFLAGS) -c $&lt; -o $@

# .dep当头文件更新，依赖它的所有文件都要更新
%.d:%.cpp
	$(CC) $(CFLAGS) $&lt; -MM &gt;$@
sinclude  $(SRCS:.cpp=.d)

# sub
$(SUB_DIR):
	make -C $@

clean:
	rm -vf $(SUB_TGT) $(SRCS:.cpp=.o) $(SRCS:.cpp=.d)
	for dir in $(SUB_DIR); do \
		make -C $$dir clean; \
		done

.PHONY:$(SUB_DIR) clean


#sub
# 子makefile
# 用来告诉make如何生成当前目录下的子目标built-in.o

SRCS=foo.cpp
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;


# 下面的规则，说明了如何生成当前目录下的子目标
# 是由当前目录下的.c生成的.o 和当前目录下的子目录的子目标临时打包生成的
# -r 临时打包
$(SUB_TGT):$(SRCS:.cpp=.o)
	$(LD) $(LDFLAGS) $(SRCS:.cpp=.o) -r -o $@
	

%.o:%.cpp
	$(CC) $(CFLAGS) -c $&lt; -o $@

# .dep当头文件更新，依赖它的所有文件都要更新
%.d:%.cpp
	$(CC) $(CFLAGS) $&lt; -MM &gt;$@
sinclude  $(SRCS:.cpp=.d)


clean:
	rm -vf $(SUB_TGT) $(SRCS:.cpp=.o) $(SRCS:.cpp=.d)

.PHONY:clean



# 修改.d文件
# main.c -&gt; main.d.6106 -&gt; main.d
# .dep当头文件更新，依赖它的所有文件都要更新
%.d:%.cpp
	$(CC) $(CFLAGS) $&lt; -MM &gt;$@.$$$$; \
	sed 's/$*.o: /$*.o $*.d: /' $@.$$$$ &gt; $@; \
	rm -vf $@.$$$$
sinclude  $(SRCS:.cpp=.d)



# 终极目标需要更新的情况
# 1.不存在
# 2.存在，时间戳比它的依赖的时间更旧
# 3.存在，它的依赖需要更新

# 更新目标之前，它的依赖处于的状态可能有
# 1.不存在，先去执行以它为目标的规则
# 2.存在，以这个依赖为目标的规则存在
# 3.存在，以这个依赖为目标的规则不存在，会去隐含规则中查找是否有相应的规则


main.c fun.c fun.h
SRCS:.c=.d 
%d:%c
如果这个时候echo $^，打印出
main.c
fun.c
在cmd中可以使用$^或者$&lt;


%o:%c
如果这个时候echo $^，打印出
main.c fun.h
fun.c fun.h
在cmd中使用$&lt;,而不使用$^

综上所述:
在cmd中依赖使用$&lt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[点亮我的战斗天使Alita]]></title>
        <id>https://wwwwwalter.github.io/post/dian-liang-wo-de-zhan-dou-tian-shi-alita/</id>
        <link href="https://wwwwwalter.github.io/post/dian-liang-wo-de-zhan-dou-tian-shi-alita/">
        </link>
        <updated>2021-02-28T14:39:46.000Z</updated>
        <content type="html"><![CDATA[<p>组装自己的台式电脑，几乎是每个学计算机同学的梦想。我也不例外，但是可能我的反应比较迟钝，迟迟没有动手组装我的台式机。也可能我接触计算机的时间还比较短，认知还没有推动我做这件事。2020年冬，工作和图像处理相关，开始了解图像处理技术，发现普通笔记本和电脑性能根本不够用，于是开始着手组装自己的台式机。<br>
虽然学过计算机组成原理，但是实际打开京东、淘宝的时候面对五花八门的计算机配件不知道买什么，还好周围全是装机达人，在他们的帮助下，买了全套配件，CPU和GPU全部是能买到现货的顶配，其他配件都买的比较便宜的那种，就算这样还是超出预算。于是就有了下面这张<br>
<img src="https://wwwwwalter.github.io/post-images/1614524820666.jpg" alt="" loading="lazy"></p>
<p>折腾了一个春节之后，台式机的组装和接线我也摸索的差不多了，感觉也不是很难。颜控和性能控的我开始在网上找心仪的机箱，最后在朋友家里看到了一款名为&quot;双子座&quot;的机箱，整体风格非常厚实还有一个透明侧板，正是我喜欢的类型，一周后京东上买下，一晚上转移主板，后面陆陆续续换了一些配件，发了一周的时间。于是就有了下面这张。<br>
<img src="https://wwwwwalter.github.io/post-images/1614524835396.jpg" alt="" loading="lazy"></p>
<p>看着心爱的机器跑起来的时候，看着五颜六色的RGB，参差错落的配件，忽然有种&quot;赛博朋克&quot;的 感觉。突然联想到电影《阿丽塔.战斗天使》，这么强悍的机器应当起个霸气的名字。于是我给她起了名字叫：Alita<br>
点亮我的战斗天使Alita<br>
<img src="https://wwwwwalter.github.io/post-images/1614524841673.jpg" alt="" loading="lazy"><br>
<img src="https://wwwwwalter.github.io/post-images/1614526458213.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[makefile中打印进程号]]></title>
        <id>https://wwwwwalter.github.io/post/makefile-zhong-da-yin-jin-cheng-hao/</id>
        <link href="https://wwwwwalter.github.io/post/makefile-zhong-da-yin-jin-cheng-hao/">
        </link>
        <updated>2021-02-28T13:53:51.000Z</updated>
        <content type="html"><![CDATA[<p>今天在学习makefile的时候，看到这样一个预定义的变量&quot;$$$$&quot;, @echo &quot;$$$$&quot;可以打印当前进程号，平时在写C语言的时候会自定义log，于是我自定义一个变量<code>DEBUG=@echo &quot;[$$$$]$@:$^\t&quot;</code>，在每个shell命令前引用这个变量，当执行make的时候，就能把每一组的<code>进程号、目标和依赖</code>打印出来，这在学习makefile模式规则的时候非常有用，分享一下心得。</p>
<pre><code>TGT = a.out
SRCS = test.c cube.c circle.c
OBJ = test.o cube.o circle.o
CC = gcc
DEBUG = @echo &quot;[$$$$]$@:$^\t&quot;


$(TGT):$(OBJ)
	$(DEBUG) $(CC) $^ -o $@

%.o:%.c
	$(DEBUG) $(CC)  -c $^ -o $@


.PHONY:
clean:
	rm $(OBJ) $(TGT)
</code></pre>
<p>make<br>
[4488]test.o:test.c      gcc -c test.c -o test.o<br>
[4489]cube.o:cube.c      gcc -c cube.c -o cube.o<br>
[4490]circle.o:circle.c  gcc -c circle.c -o circle.o<br>
[4491]a.out:test.o cube.o circle.o       gcc test.o cube.o circle.o -o a.out</p>
<p>4488 4489 4490说明模式规则被调用的次数，取决于上一层中依赖的个数，<br>
上一层依赖：OBJ = test.o cube.o circle.o，就是下一层模式规则中的目标，<br>
所以模式规则被独立的调用了3次。<br>
另外，模式规则我把他理解为一个函数，</p>
<ul>
<li>目标相当于返回值</li>
<li>依赖相当于形参</li>
<li>shell命令相当于函数体
<ul>
<li><code>每一行一个进程，不管这一行有多少命令</code></li>
</ul>
</li>
</ul>
<p>总结，之前也学过makefile的语法，感觉规则挺多的，有些模式规则看过自己根本写不出来，如果用C语言的思想来看待makefile,发现一切都在情理之中。<br>
未完待续... ...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git和github]]></title>
        <id>https://wwwwwalter.github.io/post/git-he-github/</id>
        <link href="https://wwwwwalter.github.io/post/git-he-github/">
        </link>
        <updated>2021-02-27T16:29:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git">git</h1>
<h1 id="github">github</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Makefile脚本]]></title>
        <id>https://wwwwwalter.github.io/post/makefile-jiao-ben/</id>
        <link href="https://wwwwwalter.github.io/post/makefile-jiao-ben/">
        </link>
        <updated>2021-02-25T15:51:31.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://wwwwwalter.github.io/post-images/1614191407484.jpg" alt="" loading="lazy"></figure>
<h1 id="编译过程">编译过程</h1>
<p><strong>1.预处理：头文件包含，宏展开，去注释</strong><br>
<code>gcc -E main.c -o main.i</code><br>
<strong>2.编译：做语法检查</strong><br>
<code>gcc -S main.i -o main.s</code><br>
<strong>3.汇编</strong><br>
<code>gcc -c main.s -o main.o</code><br>
<strong>4.链接</strong><br>
<code>gcc main.o -o main</code><br>
<strong>四步合为一步</strong><br>
<code>gcc main.c -o main</code><br>
<strong>速记：ESc iso</strong></p>
<p>https://blog.csdn.net/yredh_114/article/details/69389134</p>
<h1 id="makefile">Makefile</h1>
<p><strong>第一层</strong><br>
<strong>第二层</strong><br>
<strong>第三层</strong><br>
<strong>第四层</strong><br>
<strong>第五层</strong></p>
<p>创建文本文档 取名makefile<br>
#是注释<br>
<strong>第一层：显式规则</strong><br>
目标文件:依赖文件<br>
[TAB]指令<br>
第一个目标文件是最终目标<br>
rm -fr main.i main.S main.o main<br>
伪目标：.PHONY:clean</p>
<pre><code>main:main.o
    g++ main.o -o main
main.o:main.S
    g++ -c main.S -o main.o
main.S:main.i
    g++ -S main.i -o main.S
main.i:main.cpp
    g++ -E main.cpp -o main.i

.PHONY:clean_all clean
clean_all:
    rm -fr main.i main.S main.o main
clean:
    rm -fr main
</code></pre>
<p><strong>第二层：变量</strong></p>
<ul>
<li>=(赋值)   使用等号左边的变量时，取右边变量最终值</li>
<li>:=(赋值)  使用等号左边的变量是，取右边变量历史值</li>
<li>?=(探测不到则赋值)</li>
<li>+=(追加)<br>
使用变量 $(变量名)</li>
</ul>
<pre><code>VIR_A = A
VIR_B = $(VIR_A) B
VIR_A = AA

all:
	echo ${VIR_B}
#AA B
</code></pre>
<pre><code>VIR_A := A
VIR_B := $(VIR_A) B
VIR_A := AA

all:
	echo ${VIR_B}
#A B
</code></pre>
<pre><code>TAR:=test
OBJ=circle.o cube.o test.o
CC:=gcc


$(TAR):$(OBJ)
	$(CC) $(OBJ) -o $(TAR)
test.o:test.c
	$(CC) -c test.c -o test.o
circle.o:circle.c
	$(CC) -c circle.c -o circle.o
cube.o:cube.c
	$(CC) -c cube.c -o cube.o

.PHONY:clean
clean:
	rm $(OBJ) $(TAR)
</code></pre>
<p><strong>第三层：隐含规则</strong><br>
*.c     *.o：所有的.c或者.o<br>
%.c  %.o：任意的.c或者.o</p>
<p><strong>第四层：通配符</strong></p>
<ul>
<li>$@所有的目标文件</li>
<li>$^所有的依赖文件</li>
<li>$&lt;所有的依赖文件的第一个文件</li>
<li>$*不包含拓展名的目标文件名称</li>
<li>$+所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖</li>
<li>$?所有时间戳比目标文件晚的依赖文件，并以空格分开</li>
</ul>
<pre><code>TAR:=test
OBJ=circle.o cube.o test.o
CC:=gcc
RMRF:=rm -rf



$(TAR):$(OBJ)
	$(CC) $^ -o $@
%.o:%.c
	$(CC) -c $^ -o $@


.PHONY:clean
clean:
	$(RMRF) $(OBJ) $(TAR)
</code></pre>
<p><strong>第五层：函数</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[毅力号火星探测车携带1千多万爱好者姓名上火星 ]]></title>
        <id>https://wwwwwalter.github.io/post/yi-li-hao-huo-xing-tan-ce-che/</id>
        <link href="https://wwwwwalter.github.io/post/yi-li-hao-huo-xing-tan-ce-che/">
        </link>
        <updated>2021-02-18T16:16:13.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613666921697.png" alt="" loading="lazy"><br>
NASA的毅力号火星车Perseverance在2020年7月发射升空，在北京时间2021年2月19日凌晨3:15分开始着陆流程，4:55分正式着陆火星。<br>
<img src="https://wwwwwalter.github.io/post-images/1613666623955.jpeg" alt="" loading="lazy"><br>
<img src="https://wwwwwalter.github.io/post-images/1613665503054.jpg" alt="" loading="lazy"><br>
毅力号火星车前往火星的时候携带了大量的探索仪器的同时，还将19032295个天文爱好者的姓名也一并带到了火星上，这一千多万个天文爱好者的姓名刻在3块硅片上，安装在了火星车外部的一个铝片上。<br>
<img src="https://wwwwwalter.github.io/post-images/1613665428045.jpg" alt="" loading="lazy"></p>
<p>登录火星的船票，名字会永远留在火星上，等到人类登录火星那一天。这是我的船票！<br>
<img src="https://wwwwwalter.github.io/post-images/1613665588390.png" alt="" loading="lazy"></p>
<pre><code>https://mars.nasa.gov/participate/send-your-name/mars2020/certificate/188951792766
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://wwwwwalter.github.io/post-images/1613666692614.jpg" alt="" loading="lazy"></figure>
<p>在2020年7月有3个火星探测器先后发射升空，最先发射的是阿联酋的希望号火星探测器，紧随其后的是我们的天问一号，最后发射升空的是NASA的毅力号火星探测器。这些探测器之所以都集中在去年7月这个时间段发射升空，并不是为了展开新的竞赛，而是因为火星探测器需要在特定的发射窗口发射，去年的7月份刚刚好是26个月一遇的发射窗口，所以这些探测器都集中在这个时间段起飞，如果错过了这一次发射的机会，就只能等待26个月了。如欧空局和俄罗斯联合推出的ExoMars2020火星任务原计划在2020年7月实施，不过因为种种原因没赶得上这个发射窗口，所以他们的火星任务只能推迟到2022年才实施了。<br>
<img src="https://wwwwwalter.github.io/post-images/1613666777241.jpg" alt="" loading="lazy"></p>
<p>美国宇航局在南加州的喷气推进实验室为美国宇航局建造并管理火星2020年毅力火星车的运营。</p>
<p>再附一张熬夜看直播的截图<br>
<img src="https://wwwwwalter.github.io/post-images/1613668520266.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMake一个简单强大的构建工具]]></title>
        <id>https://wwwwwalter.github.io/post/cmake-yi-ge-jian-dan-qiang-da-de-gou-jian-gong-ju/</id>
        <link href="https://wwwwwalter.github.io/post/cmake-yi-ge-jian-dan-qiang-da-de-gou-jian-gong-ju/">
        </link>
        <updated>2021-02-16T01:00:08.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613439580694.png" alt="" loading="lazy"><br>
最早接触CMake是在2018年，从github上clone下来的工程，很多是按照CMake工程结构维护的。当时还在网上看过几篇cmake的使用教程，自己在ubuntu上写了一个测试小工程，用cmake生成makefile，再用makefile编译源文件，这就是我当时对cmake的初步认识。<br>
2020夏至2020年冬，在这半年的工作中我负责的工程中使用了很多第三方开源库，比如图形库OpenCV，这些库的源码有些是用VS project维护的，有些是用CMake维护的。<br>
三年后的今天，2021年春节在家，我想把cmake-cmd、cmake-gui以及cmake的跨平台功能仔细的研究一下。想深入学习，最终都是要去看源码的，亲自改一改编一编，都少不了cmake的使用。另外再写一篇关于makefile脚本的使用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《超能陆战队》观后感]]></title>
        <id>https://wwwwwalter.github.io/post/chao-neng-lu-zhan-dui/</id>
        <link href="https://wwwwwalter.github.io/post/chao-neng-lu-zhan-dui/">
        </link>
        <updated>2021-02-15T15:25:34.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613405977321.png" alt="" loading="lazy"><br>
当我感到要迷失在生活琐碎的事情中的时候，我的学习效率会降到极低，灵感也几乎为零。但是《超能陆战队》中营造的&quot;车库工作室&quot;氛围我特别喜欢。一间乱乱的房间，若干台趁手的主机和显示器，数不清的扳手、电烙铁以及的电路板，这些场景会立刻把我带入到精彩的程序世界。<br>
<img src="https://wwwwwalter.github.io/post-images/1613405946989.png" alt="" loading="lazy"><br>
学代码写代码真的是要发自内心的热爱，才能从茫茫的代码中找出自已想要的那部分代码，悉心维护，添砖加瓦，一行一行的码起来，最后用这些代码把灵感转化成现实。做出牛逼的产品也好，充满爱的产品也好。<br>
<img src="https://wwwwwalter.github.io/post-images/1613405994206.png" alt="" loading="lazy"><br>
<img src="https://wwwwwalter.github.io/post-images/1613406001028.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wwwwwalter.github.io/post/hello-gridea/</id>
        <link href="https://wwwwwalter.github.io/post/hello-gridea/">
        </link>
        <updated>2021-02-15T13:58:13.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://wwwwwalter.github.io/post/hello-world/</id>
        <link href="https://wwwwwalter.github.io/post/hello-world/">
        </link>
        <updated>2021-02-15T13:28:55.000Z</updated>
        <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    </entry>
</feed>