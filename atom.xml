<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wwwwwalter.github.io</id>
    <title>Albert NoteBook</title>
    <updated>2021-02-24T18:12:05.315Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wwwwwalter.github.io"/>
    <link rel="self" href="https://wwwwwalter.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wwwwwalter.github.io/images/avatar.png</logo>
    <icon>https://wwwwwalter.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Albert NoteBook</rights>
    <entry>
        <title type="html"><![CDATA[Makefile脚本]]></title>
        <id>https://wwwwwalter.github.io/post/makefile-jiao-ben/</id>
        <link href="https://wwwwwalter.github.io/post/makefile-jiao-ben/">
        </link>
        <updated>2021-02-25T15:51:31.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://wwwwwalter.github.io/post-images/1613581417143.jpg" alt="" loading="lazy"></figure>
<h1 id="编译过程">编译过程</h1>
<p><strong>1.预处理：头文件包含，宏展开，去注释</strong><br>
<code>gcc -E main.c -o main.i</code><br>
<strong>2.编译：做语法检查</strong><br>
<code>gcc -S main.i -o main.s</code><br>
<strong>3.汇编</strong><br>
<code>gcc -c main.s -o main.o</code><br>
<strong>4.链接</strong><br>
<code>gcc main.o -o main</code><br>
<strong>四步合为一步</strong><br>
<code>gcc main.c -o main</code><br>
<strong>速记：ESc iso</strong></p>
<p>https://blog.csdn.net/yredh_114/article/details/69389134</p>
<h1 id="makefile">Makefile</h1>
<p><strong>第一层</strong><br>
<strong>第二层</strong><br>
<strong>第三层</strong><br>
<strong>第四层</strong><br>
<strong>第五层</strong></p>
<p>创建文本文档 取名makefile<br>
#是注释<br>
<strong>第一层：显式规则</strong><br>
目标文件:依赖文件<br>
[TAB]指令<br>
第一个目标文件是最终目标<br>
rm -fr main.i main.S main.o main<br>
伪目标：.PHONY:</p>
<pre><code>main:main.o
    g++ main.o -o main
main.o:main.S
    g++ -c main.S -o main.o
main.S:main.i
    g++ -S main.i -o main.S
main.i:main.cpp
    g++ -E main.cpp -o main.i

.PHONY:
clean_all:
    rm -fr main.i main.S main.o main
clean:
    rm -fr main
</code></pre>
<p><strong>第二层：变量</strong></p>
<ul>
<li>=(赋值)   使用等号左边的变量时，取右边变量最终值</li>
<li>:=(赋值)  使用等号左边的变量是，取右边变量历史值</li>
<li>?=(探测不到则赋值)</li>
<li>+=(追加)<br>
使用变量 $(变量名)</li>
</ul>
<pre><code>VIR_A = A
VIR_B = $(VIR_A) B
VIR_A = AA

all:
	echo ${VIR_B}
#AA B
</code></pre>
<pre><code>VIR_A := A
VIR_B := $(VIR_A) B
VIR_A := AA

all:
	echo ${VIR_B}
#A B
</code></pre>
<pre><code>TAR:=test
OBJ=circle.o cube.o test.o
CC:=gcc


$(TAR):$(OBJ)
	$(CC) $(OBJ) -o $(TAR)
test.o:test.c
	$(CC) -c test.c -o test.o
circle.o:circle.c
	$(CC) -c circle.c -o circle.o
cube.o:cube.c
	$(CC) -c cube.c -o cube.o

.PHONY:
clean:
	rm $(OBJ) $(TAR)
</code></pre>
<p><strong>第三层：隐含规则</strong><br>
*.c     *.o：所有的.c或者.o<br>
%.c  %.o：任意的.c或者.o</p>
<pre><code>TAR:=test
OBJ=circle.o cube.o test.o
CC:=gcc



$(TAR):$(OBJ)
	$(CC) $(OBJ) -o $(TAR)
*.o:*.c
	$(CC) -c %.c -o %.o


.PHONY:
clean:
	rm $(OBJ) $(TAR)
</code></pre>
<p><strong>第四层：通配符</strong></p>
<ul>
<li>$@所有的目标文件</li>
<li>$^所有的依赖文件</li>
<li>$&lt;所有的依赖文件的第一个文件</li>
<li>$*不包含拓展名的目标文件名称</li>
<li>$+所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖</li>
<li>$?所有时间戳比目标文件晚的依赖文件，并以空格分开</li>
</ul>
<pre><code>TAR:=test
OBJ=circle.o cube.o test.o
CC:=gcc
RMRF:=rm -rf



$(TAR):$(OBJ)
	$(CC) $^ -o $@
%.o:%.c
	$(CC) -c $^ -o $@


.PHONY:
clean:
	$(RMRF) $(OBJ) $(TAR)
</code></pre>
<p><strong>第五层：函数</strong></p>
<h1 id="makefile第二篇">Makefile第二篇</h1>
<pre><code>#当想要指定makefile文件名时，在执行的时，需要使用下面的命令
#make -f  my_mkfile
#Makefile中的规则有很多，一条规则一般由几个部分组成:

#目标：依赖列表
#		@shell命令列表

all:A C B

A:
	@echo A
B:
	@echo B
C:
	@echo C

#其中第一个条规则中的“目标”，将会成为终极目标。我们的最终目的，就是为了生成这个目标的。
#其他的规则之间，没有必然的顺序关系，执行顺序和书写顺序无关，具体先执行哪一个由终极目标中的依赖列表顺序为准。
#每一个规则中的目标，看似是一个文件，其实只是一个标签
#每一个规则，不一定有依赖
#每一个规则，不一定有命令
#目标：依赖：依赖：依赖，形成一条链路，当哪一层的依赖文件比目标新，从这里网上都要重新编译。
#通常情况下，目标和依赖都是具体的文件名
#但是目标和文件名只是标签，具体的依赖和目标只用在shell命令中

#当目标是标签，它代表的时间最老
#当依赖是标签/null，它代表的时间最新

#当依赖是标签时，下面一定要有这个目标，否则报错
#当依赖是具体的文件时，只要目录里有，就不会报错，即使下面没有这个目标


#当时间信息不对时，需要将时间调整 正确之后，才能使用make命令的。
#Makefile是根据文件的时间信息，来调整是否需要重新编译。


#如果想取消某一条命令本身的打印，那么可以在这个命令的前面加上@符号。
#如果想忽略错误继续执行下面命令，那么可以在这个命令的前面加上-符号。

all:
	echo A
	@echo A
	-echo A
	-@echo A
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[毅力号火星探测车携带1千多万爱好者姓名上火星 ]]></title>
        <id>https://wwwwwalter.github.io/post/yi-li-hao-huo-xing-tan-ce-che/</id>
        <link href="https://wwwwwalter.github.io/post/yi-li-hao-huo-xing-tan-ce-che/">
        </link>
        <updated>2021-02-18T16:16:13.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613666921697.png" alt="" loading="lazy"><br>
NASA的毅力号火星车Perseverance在2020年7月发射升空，在北京时间2021年2月19日凌晨3:15分开始着陆流程，4:55分正式着陆火星。<br>
<img src="https://wwwwwalter.github.io/post-images/1613666623955.jpeg" alt="" loading="lazy"><br>
<img src="https://wwwwwalter.github.io/post-images/1613665503054.jpg" alt="" loading="lazy"><br>
毅力号火星车前往火星的时候携带了大量的探索仪器的同时，还将19032295个天文爱好者的姓名也一并带到了火星上，这一千多万个天文爱好者的姓名刻在3块硅片上，安装在了火星车外部的一个铝片上。<br>
<img src="https://wwwwwalter.github.io/post-images/1613665428045.jpg" alt="" loading="lazy"></p>
<p>登录火星的船票，名字会永远留在火星上，等到人类登录火星那一天。这是我的船票！<br>
<img src="https://wwwwwalter.github.io/post-images/1613665588390.png" alt="" loading="lazy"></p>
<pre><code>https://mars.nasa.gov/participate/send-your-name/mars2020/certificate/188951792766
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://wwwwwalter.github.io/post-images/1613666692614.jpg" alt="" loading="lazy"></figure>
<p>在2020年7月有3个火星探测器先后发射升空，最先发射的是阿联酋的希望号火星探测器，紧随其后的是我们的天问一号，最后发射升空的是NASA的毅力号火星探测器。这些探测器之所以都集中在去年7月这个时间段发射升空，并不是为了展开新的竞赛，而是因为火星探测器需要在特定的发射窗口发射，去年的7月份刚刚好是26个月一遇的发射窗口，所以这些探测器都集中在这个时间段起飞，如果错过了这一次发射的机会，就只能等待26个月了。如欧空局和俄罗斯联合推出的ExoMars2020火星任务原计划在2020年7月实施，不过因为种种原因没赶得上这个发射窗口，所以他们的火星任务只能推迟到2022年才实施了。<br>
<img src="https://wwwwwalter.github.io/post-images/1613666777241.jpg" alt="" loading="lazy"></p>
<p>美国宇航局在南加州的喷气推进实验室为美国宇航局建造并管理火星2020年毅力火星车的运营。</p>
<p>再附一张熬夜看直播的截图<br>
<img src="https://wwwwwalter.github.io/post-images/1613668520266.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMake一个简单强大的构建工具]]></title>
        <id>https://wwwwwalter.github.io/post/cmake-yi-ge-jian-dan-qiang-da-de-gou-jian-gong-ju/</id>
        <link href="https://wwwwwalter.github.io/post/cmake-yi-ge-jian-dan-qiang-da-de-gou-jian-gong-ju/">
        </link>
        <updated>2021-02-16T01:00:08.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613439580694.png" alt="" loading="lazy"><br>
最早接触CMake是在2018年，从github上clone下来的工程，很多是按照CMake工程结构维护的。当时还在网上看过几篇cmake的使用教程，自己在ubuntu上写了一个测试小工程，用cmake生成makefile，再用makefile编译源文件，这就是我当时对cmake的初步认识。<br>
2020夏至2020年冬，在这半年的工作中我负责的工程中使用了很多第三方开源库，比如图形库OpenCV，这些库的源码有些是用VS project维护的，有些是用CMake维护的。<br>
三年后的今天，2021年春节在家，我想把cmake-cmd、cmake-gui以及cmake的跨平台功能仔细的研究一下。想深入学习，最终都是要去看源码的，亲自改一改编一编，都少不了cmake的使用。另外再写一篇关于makefile脚本的使用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《超能陆战队》观后感]]></title>
        <id>https://wwwwwalter.github.io/post/chao-neng-lu-zhan-dui/</id>
        <link href="https://wwwwwalter.github.io/post/chao-neng-lu-zhan-dui/">
        </link>
        <updated>2021-02-15T15:25:34.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://wwwwwalter.github.io/post-images/1613405977321.png" alt="" loading="lazy"><br>
当我感到要迷失在生活琐碎的事情中的时候，我的学习效率会降到极低，灵感也几乎为零。但是《超能陆战队》中营造的&quot;车库工作室&quot;氛围我特别喜欢。一间乱乱的房间，若干台趁手的主机和显示器，数不清的扳手、电烙铁以及的电路板，这些场景会立刻把我带入到精彩的程序世界。<br>
<img src="https://wwwwwalter.github.io/post-images/1613405946989.png" alt="" loading="lazy"><br>
学代码写代码真的是要发自内心的热爱，才能从茫茫的代码中找出自已想要的那部分代码，悉心维护，添砖加瓦，一行一行的码起来，最后用这些代码把灵感转化成现实。做出牛逼的产品也好，充满爱的产品也好。<br>
<img src="https://wwwwwalter.github.io/post-images/1613405994206.png" alt="" loading="lazy"><br>
<img src="https://wwwwwalter.github.io/post-images/1613406001028.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wwwwwalter.github.io/post/hello-gridea/</id>
        <link href="https://wwwwwalter.github.io/post/hello-gridea/">
        </link>
        <updated>2021-02-15T13:58:13.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://wwwwwalter.github.io/post/hello-world/</id>
        <link href="https://wwwwwalter.github.io/post/hello-world/">
        </link>
        <updated>2021-02-15T13:28:55.000Z</updated>
        <content type="html"><![CDATA[<p>hello world</p>
]]></content>
    </entry>
</feed>